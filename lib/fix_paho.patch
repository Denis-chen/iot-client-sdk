diff -Naur --strip-trailing-cr paho.mqtt.embedded-c-master/MQTTClient/src/FP.h paho.mqtt.embedded-c-master_patched/MQTTClient/src/FP.h
--- paho.mqtt.embedded-c-master/MQTTClient/src/FP.h	2016-09-12 21:15:18.000000000 +0300
+++ paho.mqtt.embedded-c-master_patched/MQTTClient/src/FP.h	2017-08-25 17:17:33.558554600 +0300
@@ -191,7 +191,7 @@
 private:
 
     // empty type used for casting
-    class FPtrDummy;
+    class FPtrDummy {};
 
     FPtrDummy *obj_callback;
 
diff -Naur --strip-trailing-cr paho.mqtt.embedded-c-master/MQTTClient/src/MQTTClient.h paho.mqtt.embedded-c-master_patched/MQTTClient/src/MQTTClient.h
--- paho.mqtt.embedded-c-master/MQTTClient/src/MQTTClient.h	2016-09-12 21:15:18.000000000 +0300
+++ paho.mqtt.embedded-c-master_patched/MQTTClient/src/MQTTClient.h	2017-08-28 11:46:10.700942200 +0300
@@ -52,7 +52,7 @@
     bool dup;
     unsigned short id;
     void *payload;
-    size_t payloadlen;
+    int payloadlen;
 };
 
 
@@ -100,7 +100,7 @@
 
 public:
 
-    typedef void (*messageHandler)(MessageData&);
+    typedef FP<void, MessageData&> messageHandler;
 
     /** Construct the client
      *  @param network - pointer to an instance of the Network class - must be connected to the endpoint
@@ -109,12 +109,17 @@
      */
     Client(Network& network, unsigned int command_timeout_ms = 30000);
 
+    void setCommandTimeout(unsigned long command_timeout_ms)
+    {
+        this->command_timeout_ms = command_timeout_ms;
+    }
+
     /** Set the default message handling callback - used for any message which does not match a subscription message handler
      *  @param mh - pointer to the callback function
      */
     void setDefaultMessageHandler(messageHandler mh)
     {
-        defaultMessageHandler.attach(mh);
+        defaultMessageHandler = mh;
     }
 
     /** MQTT Connect - send an MQTT connect packet down the network and wait for a Connack
@@ -131,6 +136,8 @@
      */
     int connect(MQTTPacket_connectData& options);
 
+    int connect(MQTTPacket_connectData& options, bool& sessionPresent);
+
     /** MQTT Publish - send an MQTT publish packet and wait for all acks to complete for all QoSs
      *  @param topic - the topic to publish to
      *  @param message - the message to send
@@ -146,7 +153,7 @@
      *  @param retained - whether the message should be retained
      *  @return success code -
      */
-    int publish(const char* topicName, void* payload, size_t payloadlen, enum QoS qos = QOS0, bool retained = false);
+    int publish(const char* topicName, void* payload, int payloadlen, enum QoS qos = QOS0, bool retained = false);
     
     /** MQTT Publish - send an MQTT publish packet and wait for all acks to complete for all QoSs
      *  @param topic - the topic to publish to
@@ -157,7 +164,7 @@
      *  @param retained - whether the message should be retained
      *  @return success code -
      */
-    int publish(const char* topicName, void* payload, size_t payloadlen, unsigned short& id, enum QoS qos = QOS1, bool retained = false);
+    int publish(const char* topicName, void* payload, int payloadlen, unsigned short& id, enum QoS qos = QOS1, bool retained = false);
 
     /** MQTT Subscribe - send an MQTT subscribe packet and wait for the suback
      *  @param topicFilter - a topic pattern which can include wildcards
@@ -224,10 +231,10 @@
     struct MessageHandlers
     {
         const char* topicFilter;
-        FP<void, MessageData&> fp;
-    } messageHandlers[MAX_MESSAGE_HANDLERS];      // Message handlers are indexed by subscription topic
+        messageHandler fp;
+    } messageHandlers[MAX_MESSAGE_HANDLERS + 1];      // Message handlers are indexed by subscription topic
 
-    FP<void, MessageData&> defaultMessageHandler;
+    messageHandler defaultMessageHandler;
 
     bool isconnected;
 
@@ -547,7 +554,7 @@
             Message msg;
             int intQoS;
             if (MQTTDeserialize_publish((unsigned char*)&msg.dup, &intQoS, (unsigned char*)&msg.retained, (unsigned short*)&msg.id, &topicName,
-                                 (unsigned char**)&msg.payload, (int*)&msg.payloadlen, readbuf, MAX_MQTT_PACKET_SIZE) != 1)
+                                 (unsigned char**)&msg.payload, &msg.payloadlen, readbuf, MAX_MQTT_PACKET_SIZE) != 1)
                 goto exit;
             msg.qos = (enum QoS)intQoS;
 #if MQTTCLIENT_QOS2
@@ -658,7 +665,7 @@
 
 
 template<class Network, class Timer, int MAX_MQTT_PACKET_SIZE, int b>
-int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::connect(MQTTPacket_connectData& options)
+int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::connect(MQTTPacket_connectData& options, bool& sessionPresent)
 {
     Timer connect_timer(command_timeout_ms);
     int rc = FAILURE;
@@ -680,7 +687,7 @@
     if (waitfor(CONNACK, connect_timer) == CONNACK)
     {
         unsigned char connack_rc = 255;
-        bool sessionPresent = false;
+        sessionPresent = false;
         if (MQTTDeserialize_connack((unsigned char*)&sessionPresent, &connack_rc, readbuf, MAX_MQTT_PACKET_SIZE) == 1)
             rc = connack_rc;
         else
@@ -716,6 +723,14 @@
 
 
 template<class Network, class Timer, int MAX_MQTT_PACKET_SIZE, int b>
+int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::connect(MQTTPacket_connectData& options)
+{
+    bool sessionPresent;
+    return connect(options, sessionPresent);
+}
+
+
+template<class Network, class Timer, int MAX_MQTT_PACKET_SIZE, int b>
 int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::connect()
 {
     MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
@@ -748,12 +763,17 @@
             rc = grantedQoS; // 0, 1, 2 or 0x80
         if (rc != 0x80)
         {
+            if (MAX_MESSAGE_HANDLERS <= 0)
+            {
+                rc = 0;
+            }
+
             for (int i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
             {
                 if (messageHandlers[i].topicFilter == 0)
                 {
                     messageHandlers[i].topicFilter = topicFilter;
-                    messageHandlers[i].fp.attach(messageHandler);
+                    messageHandlers[i].fp = messageHandler;
                     rc = 0;
                     break;
                 }
@@ -863,7 +883,7 @@
 
 
 template<class Network, class Timer, int MAX_MQTT_PACKET_SIZE, int b>
-int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::publish(const char* topicName, void* payload, size_t payloadlen, unsigned short& id, enum QoS qos, bool retained)
+int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::publish(const char* topicName, void* payload, int payloadlen, unsigned short& id, enum QoS qos, bool retained)
 {
     int rc = FAILURE;
     Timer timer(command_timeout_ms);
@@ -905,7 +925,7 @@
 
 
 template<class Network, class Timer, int MAX_MQTT_PACKET_SIZE, int b>
-int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::publish(const char* topicName, void* payload, size_t payloadlen, enum QoS qos, bool retained)
+int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, b>::publish(const char* topicName, void* payload, int payloadlen, enum QoS qos, bool retained)
 {
     unsigned short id = 0;  // dummy - not used for anything
     return publish(topicName, payload, payloadlen, id, qos, retained);
@@ -928,10 +948,16 @@
     if (len > 0)
         rc = sendPacket(len, timer);            // send the disconnect packet
 
-	if (cleansession)
-		cleanSession();
-	else
-	    isconnected = false;
+    if (cleansession)
+    {
+        cleanSession();
+    }
+    else
+    {
+        isconnected = false;
+        ping_outstanding = false;
+    }
+
     return rc;
 }
 
diff -Naur --strip-trailing-cr paho.mqtt.embedded-c-master/MQTTPacket/src/MQTTDeserializePublish.c paho.mqtt.embedded-c-master_patched/MQTTPacket/src/MQTTDeserializePublish.c
--- paho.mqtt.embedded-c-master/MQTTPacket/src/MQTTDeserializePublish.c	2016-09-12 21:15:18.000000000 +0300
+++ paho.mqtt.embedded-c-master_patched/MQTTPacket/src/MQTTDeserializePublish.c	2017-08-23 11:16:46.693197600 +0300
@@ -50,7 +50,7 @@
 	*qos = header.bits.qos;
 	*retained = header.bits.retain;
 
-	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
+	curdata += MQTTPacket_decodeBuf(curdata, &mylen); /* read remaining length */
 	enddata = curdata + mylen;
 
 	if (!readMQTTLenString(topicName, &curdata, enddata) ||
diff -Naur --strip-trailing-cr paho.mqtt.embedded-c-master/MQTTPacket/src/MQTTFormat.c paho.mqtt.embedded-c-master_patched/MQTTPacket/src/MQTTFormat.c
--- paho.mqtt.embedded-c-master/MQTTPacket/src/MQTTFormat.c	2016-09-12 21:15:18.000000000 +0300
+++ paho.mqtt.embedded-c-master_patched/MQTTPacket/src/MQTTFormat.c	2017-08-23 11:16:46.693197600 +0300
@@ -196,7 +196,7 @@
 	{
 	case CONNECT:
 	{
-		MQTTPacket_connectData data;
+		MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 		int rc;
 		if ((rc = MQTTDeserialize_connect(&data, buf, buflen)) == 1)
 			strindex = MQTTStringFormat_connect(strbuf, strbuflen, &data);
